import os
import json
import time
import requests
from datetime import datetime
import pytz
from utils.logger_config import logger
import traceback
import base64
import io
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import plotly.io as pio
import pandas as pd

class DiscordNotifier:
    """L·ªõp qu·∫£n l√Ω vi·ªác g·ª≠i th√¥ng b√°o ƒë·∫øn Discord"""
    
    def __init__(self, config_path="../config/system_config.json"):
        """
        Kh·ªüi t·∫°o Discord Notifier
        
        Args:
            config_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
        """
        # ƒê·ªçc c·∫•u h√¨nh
        self.config_path = config_path
        
        with open(self.config_path, 'r') as f:
            self.config = json.load(f)
        
        # ƒê·ªçc webhook URLs
        api_keys_path = os.path.join(os.path.dirname(self.config_path), "api_keys.json")
        with open(api_keys_path, 'r') as f:
            api_keys = json.load(f)
        
        self.prediction_webhook = api_keys['discord']['prediction_webhook']
        self.update_webhook = api_keys['discord']['update_webhook']
        
        # Thi·∫øt l·∫≠p c·∫•u h√¨nh th√¥ng b√°o
        self.notification_config = self.config['notification']
        self.max_retries = self.notification_config['max_retries']
        self.retry_delay = self.notification_config['retry_delay_seconds']
        
        # Timezone
        self.market_timezone = pytz.timezone(self.config['market']['timezone'])
        
        # Kh·ªüi t·∫°o c√°c m√†u s·∫Øc theo c·∫•u h√¨nh
        self.viz_config = self.config['visualization']
        self.up_color = self.viz_config['up_color']
        self.down_color = self.viz_config['down_color']
        self.neutral_color = self.viz_config['neutral_color']
        
        logger.info("Kh·ªüi t·∫°o Discord Notifier th√†nh c√¥ng")
    
    def _send_webhook(self, webhook_url, payload, retries=None):
        """
        G·ª≠i th√¥ng b√°o ƒë·∫øn webhook Discord
        
        Args:
            webhook_url (str): URL webhook Discord
            payload (dict): N·ªôi dung th√¥ng b√°o
            retries (int, optional): S·ªë l·∫ßn th·ª≠ l·∫°i n·∫øu g·∫∑p l·ªói
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if retries is None:
            retries = self.max_retries
        
        headers = {
            "Content-Type": "application/json"
        }
        
        for attempt in range(retries + 1):
            try:
                response = requests.post(webhook_url, json=payload, headers=headers)
                
                if response.status_code == 429:  # Rate limit
                    # L·∫•y th·ªùi gian c·∫ßn ƒë·ª£i t·ª´ ph·∫£n h·ªìi
                    retry_after = response.json().get('retry_after', self.retry_delay) / 1000.0
                    logger.warning(f"Discord rate limit, ƒë·ª£i {retry_after} gi√¢y")
                    time.sleep(retry_after)
                    continue
                
                response.raise_for_status()
                return True
            except requests.exceptions.HTTPError as http_err:
                logger.error(f"HTTP Error: {http_err}")
                if attempt < retries:
                    logger.info(f"Th·ª≠ l·∫°i sau {self.retry_delay} gi√¢y (l·∫ßn {attempt + 1}/{retries})")
                    time.sleep(self.retry_delay)
                else:
                    return False
            except Exception as err:
                logger.error(f"L·ªói khi g·ª≠i webhook: {err}")
                if attempt < retries:
                    logger.info(f"Th·ª≠ l·∫°i sau {self.retry_delay} gi√¢y (l·∫ßn {attempt + 1}/{retries})")
                    time.sleep(self.retry_delay)
                else:
                    return False
        
        return False
    
    def _format_prediction(self, prediction_data, prediction_type):
        """
        ƒê·ªãnh d·∫°ng d·ªØ li·ªáu d·ª± ƒëo√°n ƒë·ªÉ hi·ªÉn th·ªã trong Discord
        
        Args:
            prediction_data (dict): D·ªØ li·ªáu d·ª± ƒëo√°n
            prediction_type (str): Lo·∫°i d·ª± ƒëo√°n ('intraday', 'five_day', 'monthly')
            
        Returns:
            dict: D·ªØ li·ªáu ƒë√£ ƒë·ªãnh d·∫°ng
        """
        if prediction_type not in prediction_data:
            logger.debug(f"Kh√¥ng t√¨m th·∫•y d·ª± ƒëo√°n lo·∫°i {prediction_type} trong d·ªØ li·ªáu")
            return None
        
        pred = prediction_data[prediction_type]
        if not pred or not isinstance(pred, dict):
            logger.debug(f"D·ª± ƒëo√°n lo·∫°i {prediction_type} kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng")
            return None
        
        # Ki·ªÉm tra xem c√≥ ƒë·ªß th√¥ng tin kh√¥ng
        if 'direction' not in pred or 'confidence' not in pred:
            logger.debug(f"D·ª± ƒëo√°n lo·∫°i {prediction_type} thi·∫øu th√¥ng tin direction ho·∫∑c confidence")
            return None
        
        # Log chi ti·∫øt
        logger.info(f"DEBUG - Format prediction {prediction_type}: original_direction={pred['direction']}, confidence={pred['confidence']}")

        # T·∫°o emoji h∆∞·ªõng
        direction_emoji = "üîº" if pred['direction'] == 'up' else "üîΩ" if pred['direction'] == 'down' else "‚û°Ô∏è"
        
        # ƒê·ªãnh d·∫°ng gi√°
        price = pred.get('predicted_price', pred.get('price', pred.get('predicted_value', 'N/A')))
        if isinstance(price, (int, float)):
            price = f"${price:.2f}"
        
        # ƒê·ªãnh d·∫°ng ƒë·ªô tin c·∫≠y
        confidence = pred.get('confidence', 0)
        if isinstance(confidence, (int, float)):
            confidence = f"{confidence:.1f}%"
        else:
            confidence = "N/A"
        
        # T·∫°o l√Ω do cho d·ª± ƒëo√°n
        reason = pred.get('reason', "")
        if not reason or reason == "":
            # ƒê·∫£m b·∫£o lu√¥n c√≥ l√Ω do ph√π h·ª£p v·ªõi h∆∞·ªõng d·ª± ƒëo√°n
            if pred['direction'] == 'up':
                if prediction_type == 'intraday':
                    price_change = pred.get('price_change_percent', 0)
                    reason = f"M√¥ h√¨nh d·ª± ƒëo√°n gi√° tƒÉng {abs(price_change):.1f}%"
                elif prediction_type == 'five_day':
                    price_change = pred.get('price_change_percent', 0)
                    reason = f"M√¥ h√¨nh d·ª± ƒëo√°n gi√° tƒÉng {abs(price_change):.1f}% trong 5 ng√†y t·ªõi"
                else:  # monthly
                    price_change = pred.get('price_change_percent', 0)
                    reason = f"M√¥ h√¨nh d·ª± ƒëo√°n xu h∆∞·ªõng tƒÉng gi√° {abs(price_change):.1f}% trong th√°ng t·ªõi"
            elif pred['direction'] == 'down':
                if prediction_type == 'intraday':
                    price_change = pred.get('price_change_percent', 0)
                    reason = f"M√¥ h√¨nh d·ª± ƒëo√°n gi√° gi·∫£m {abs(price_change):.1f}%"
                elif prediction_type == 'five_day':
                    price_change = pred.get('price_change_percent', 0)
                    reason = f"M√¥ h√¨nh d·ª± ƒëo√°n gi√° gi·∫£m {abs(price_change):.1f}% trong 5 ng√†y t·ªõi"
                else:  # monthly
                    price_change = pred.get('price_change_percent', 0)
                    reason = f"M√¥ h√¨nh d·ª± ƒëo√°n xu h∆∞·ªõng gi·∫£m gi√° {abs(price_change):.1f}% trong th√°ng t·ªõi"
            else:
                reason = "D·ª± ƒëo√°n d·ª±a tr√™n m√¥ h√¨nh ML"
        
        return {
            "emoji": direction_emoji,
            "price": price,
            "confidence": confidence,
            "reason": reason,
            "direction": pred['direction']
        }
    
    def _create_stock_embed(self, symbol, prediction_data):
        """
        T·∫°o embed th√¥ng tin d·ª± ƒëo√°n cho m·ªôt c·ªï phi·∫øu
        
        Args:
            symbol (str): M√£ c·ªï phi·∫øu
            prediction_data (dict): D·ªØ li·ªáu d·ª± ƒëo√°n
            
        Returns:
            dict: Discord embed object
        """
        # ƒê·ªãnh d·∫°ng c√°c d·ª± ƒëo√°n
        intraday_formatted = self._format_prediction(prediction_data, 'intraday')
        five_day_formatted = self._format_prediction(prediction_data, 'five_day')
        monthly_formatted = self._format_prediction(prediction_data, 'monthly')
        
        # Log ƒë·ªÉ ki·ªÉm tra
        logger.info(f"DEBUG - {symbol} predictions: intraday={intraday_formatted is not None}, five_day={five_day_formatted is not None}, monthly={monthly_formatted is not None}")
    
        if intraday_formatted:
            logger.info(f"DEBUG - {symbol} intraday: direction={intraday_formatted['direction']}, price={intraday_formatted['price']}, confidence={intraday_formatted['confidence']}")

        # X√°c ƒë·ªãnh m√†u s·∫Øc embed d·ª±a tr√™n d·ª± ƒëo√°n intraday ho·∫∑c m·∫∑c ƒë·ªãnh
        if intraday_formatted and intraday_formatted['direction'] == 'up':
            color = int(self.up_color.replace('#', ''), 16)
            direction_emoji = "üîº"
        elif intraday_formatted and intraday_formatted['direction'] == 'down':
            color = int(self.down_color.replace('#', ''), 16)
            direction_emoji = "üîΩ"
        else:
            color = int(self.neutral_color.replace('#', ''), 16)
            direction_emoji = "‚û°Ô∏è"
        
        # T·∫°o ti√™u ƒë·ªÅ
        title = f"{direction_emoji} D·ª± ƒëo√°n gi√° {symbol}"
        
        # T·∫°o th√¥ng tin v·ªÅ gi√° hi·ªán t·∫°i
        current_price = prediction_data.get('current_price', 'N/A')
        if isinstance(current_price, (int, float)):
            current_price = f"${current_price:.2f}"
        
        # T·∫°o n·ªôi dung cho t·ª´ng m·ªëc th·ªùi gian
        fields = []
        
        # Th√™m th√¥ng tin intraday
        if intraday_formatted:
            intraday_field = {
                "name": f"{intraday_formatted['emoji']} D·ª± ƒëo√°n Intraday",
                "value": f"Gi√°: {intraday_formatted['price']}\nƒê·ªô tin c·∫≠y: {intraday_formatted['confidence']}\nL√Ω do: {intraday_formatted['reason']}",
                "inline": True
            }
            fields.append(intraday_field)
        
        # Th√™m th√¥ng tin 5 ng√†y
        if five_day_formatted:
            five_day_field = {
                "name": f"{five_day_formatted['emoji']} D·ª± ƒëo√°n 5 ng√†y",
                "value": f"Gi√°: {five_day_formatted['price']}\nƒê·ªô tin c·∫≠y: {five_day_formatted['confidence']}\nL√Ω do: {five_day_formatted['reason']}",
                "inline": True
            }
            fields.append(five_day_field)
        
        # Th√™m th√¥ng tin 1 th√°ng
        if monthly_formatted:
            monthly_field = {
                "name": f"{monthly_formatted['emoji']} D·ª± ƒëo√°n 1 th√°ng",
                "value": f"Gi√°: {monthly_formatted['price']}\nƒê·ªô tin c·∫≠y: {monthly_formatted['confidence']}\nL√Ω do: {monthly_formatted['reason']}",
                "inline": True
            }
            fields.append(monthly_field)
        
        # T·∫°o footer v·ªõi timestamp
        timestamp = datetime.now(self.market_timezone).strftime("%Y-%m-%d %H:%M:%S %Z")
        
        # T·∫°o embed object
        embed = {
            "title": title,
            "description": f"Gi√° hi·ªán t·∫°i: {current_price}",
            "color": color,
            "fields": fields,
            "footer": {
                "text": f"BondZiA AI ‚Ä¢ {timestamp}"
            }
        }
        
        # Th√™m thumbnail n·∫øu c√≥ ·∫£nh bi·ªÉu ƒë·ªì
        if prediction_data.get('chart_url'):
            embed["thumbnail"] = {
                "url": prediction_data['chart_url']
            }
        
        return embed
    
    def send_prediction_message(self, predictions_data, group_size=3):
        """
        G·ª≠i th√¥ng b√°o d·ª± ƒëo√°n gi√° c·ªï phi·∫øu
        
        Args:
            predictions_data (dict): D·ªØ li·ªáu d·ª± ƒëo√°n theo c·∫•u tr√∫c {symbol: prediction_data}
            group_size (int): S·ªë l∆∞·ª£ng c·ªï phi·∫øu g·ª≠i trong m·ªói tin nh·∫Øn
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if not self.notification_config['send_predictions']:
            logger.info("B·ªè qua th√¥ng b√°o d·ª± ƒëo√°n (ƒë√£ t·∫Øt trong c·∫•u h√¨nh)")
            return True
        
        # Log th√¥ng tin v·ªÅ c√°c lo·∫°i d·ª± ƒëo√°n c√≥ trong th√¥ng b√°o
        prediction_types_summary = {}
        for symbol, data in predictions_data.items():
            types = []
            if 'intraday' in data:
                types.append('intraday')
            if 'five_day' in data:
                types.append('five_day')
            if 'monthly' in data:
                types.append('monthly')
            prediction_types_summary[symbol] = types
        
        logger.info(f"Chu·∫©n b·ªã g·ª≠i d·ª± ƒëo√°n v·ªõi c√°c khung th·ªùi gian: {prediction_types_summary}")

        try:
            # Chia nh·ªè danh s√°ch c·ªï phi·∫øu th√†nh c√°c nh√≥m
            symbols = list(predictions_data.keys())
            symbol_groups = [symbols[i:i + group_size] for i in range(0, len(symbols), group_size)]
            
            success = True
            
            for group in symbol_groups:
                embeds = []
                
                for symbol in group:
                    prediction_data = predictions_data[symbol]
                    embed = self._create_stock_embed(symbol, prediction_data)
                    embeds.append(embed)
                
                # T·∫°o payload
                timestamp = datetime.now(self.market_timezone).strftime("%Y-%m-%d %H:%M:%S %Z")
                payload = {
                    "content": f"**BondZiA AI - D·ª± ƒëo√°n gi√° c·ªï phi·∫øu ({timestamp})**",
                    "embeds": embeds
                }
                
                # Th√™m log debug ƒë·ªÉ ki·ªÉm tra d·ª± ƒëo√°n
                logger.info(f"ƒêang g·ª≠i d·ª± ƒëo√°n cho nh√≥m c·ªï phi·∫øu: {group}")
                logger.info(f"S·ªë l∆∞·ª£ng embeds: {len(embeds)}")
                for idx, embed in enumerate(embeds):
                    logger.info(f"Embed {idx+1}: {embed['title']}")

                # G·ª≠i webhook
                if not self._send_webhook(self.prediction_webhook, payload):
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o d·ª± ƒëo√°n cho nh√≥m: {group}")
                    success = False
                else:
                    logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o d·ª± ƒëo√°n cho: {group}")
                
                # ƒê·ª£i gi·ªØa c√°c l·∫ßn g·ª≠i ƒë·ªÉ tr√°nh rate limit
                time.sleep(1)
            
            return success
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o d·ª± ƒëo√°n: {str(e)}")
            logger.error(traceback.format_exc())
            return False
    
    def send_system_update(self, title, message, is_error=False, fields=None):
        """
        G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t h·ªá th·ªëng
        
        Args:
            title (str): Ti√™u ƒë·ªÅ th√¥ng b√°o
            message (str): N·ªôi dung th√¥ng b√°o
            is_error (bool): True n·∫øu l√† th√¥ng b√°o l·ªói
            fields (list, optional): Danh s√°ch c√°c tr∆∞·ªùng b·ªï sung
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if is_error and not self.notification_config['send_errors']:
            logger.info("B·ªè qua th√¥ng b√°o l·ªói (ƒë√£ t·∫Øt trong c·∫•u h√¨nh)")
            return True
        
        if not is_error and not self.notification_config['send_system_updates']:
            logger.info("B·ªè qua th√¥ng b√°o c·∫≠p nh·∫≠t (ƒë√£ t·∫Øt trong c·∫•u h√¨nh)")
            return True
        
        try:
            # X√°c ƒë·ªãnh m√†u s·∫Øc d·ª±a tr√™n lo·∫°i th√¥ng b√°o
            if is_error:
                color = 0xFF0000  # Red for errors
                title = f"‚ö†Ô∏è {title}"
            else:
                color = 0x00FF00  # Green for updates
                title = f"üì¢ {title}"
            
            # Chu·∫©n b·ªã c√°c tr∆∞·ªùng b·ªï sung
            embed_fields = []
            if fields:
                for field in fields:
                    embed_fields.append({
                        "name": field.get("name", ""),
                        "value": field.get("value", ""),
                        "inline": field.get("inline", False)
                    })
            
            # T·∫°o timestamp
            timestamp = datetime.now(self.market_timezone).strftime("%Y-%m-%d %H:%M:%S %Z")
            
            # T·∫°o embed
            embed = {
                "title": title,
                "description": message,
                "color": color,
                "fields": embed_fields,
                "footer": {
                    "text": f"BondZiA AI ‚Ä¢ {timestamp}"
                }
            }
            
            # T·∫°o payload
            payload = {
                "embeds": [embed]
            }
            
            # G·ª≠i webhook
            return self._send_webhook(self.update_webhook, payload)
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t h·ªá th·ªëng: {str(e)}")
            logger.error(traceback.format_exc())
            return False
    
    def send_evolution_update(self, version, improvements, params_changed, performance):
        """
        G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t v·ªÅ ti·∫øn h√≥a c·ªßa AI
        
        Args:
            version (str): Phi√™n b·∫£n m·ªõi
            improvements (dict): C·∫£i thi·ªán theo c·ªï phi·∫øu {symbol: percentage}
            params_changed (int): S·ªë l∆∞·ª£ng si√™u tham s·ªë ƒë√£ thay ƒë·ªïi
            performance (dict): Hi·ªáu su·∫•t tr∆∞·ªõc v√† sau khi ti·∫øn h√≥a
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if not self.notification_config['send_system_updates']:
            logger.info("B·ªè qua th√¥ng b√°o ti·∫øn h√≥a (ƒë√£ t·∫Øt trong c·∫•u h√¨nh)")
            return True
        
        try:
            # T·∫°o danh s√°ch c·∫£i thi·ªán
            improvements_list = []
            for symbol, percentage in improvements.items():
                if percentage > 0:
                    improvements_list.append(f"{symbol}: +{percentage:.2f}%")
                else:
                    improvements_list.append(f"{symbol}: {percentage:.2f}%")
            
            improvements_text = "\n".join(improvements_list)
            
            # T·∫°o th√¥ng tin v·ªÅ hi·ªáu su·∫•t
            performance_text = f"Tr∆∞·ªõc ti·∫øn h√≥a: {performance.get('before', 'N/A')}\nSau ti·∫øn h√≥a: {performance.get('after', 'N/A')}"
            
            # T·∫°o c√°c tr∆∞·ªùng
            fields = [
                {
                    "name": "C·∫£i thi·ªán d·ª± ƒëo√°n",
                    "value": improvements_text,
                    "inline": False
                },
                {
                    "name": "S·ªë l∆∞·ª£ng si√™u tham s·ªë thay ƒë·ªïi",
                    "value": str(params_changed),
                    "inline": True
                },
                {
                    "name": "Hi·ªáu su·∫•t",
                    "value": performance_text,
                    "inline": True
                }
            ]
            
            # G·ª≠i th√¥ng b√°o
            return self.send_system_update(
                title=f"Ti·∫øn h√≥a AI th√†nh c√¥ng - Phi√™n b·∫£n {version}",
                message="BondZiA AI ƒë√£ ho√†n th√†nh qu√° tr√¨nh ti·∫øn h√≥a v√† n√¢ng c·∫•p l√™n phi√™n b·∫£n m·ªõi.",
                fields=fields
            )
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o ti·∫øn h√≥a: {str(e)}")
            logger.error(traceback.format_exc())
            return False
    
    def send_chart_with_prediction(self, symbol, chart_data, prediction_data):
        """
        T·∫°o v√† g·ª≠i bi·ªÉu ƒë·ªì v·ªõi d·ª± ƒëo√°n
        
        Args:
            symbol (str): M√£ c·ªï phi·∫øu
            chart_data (DataFrame): D·ªØ li·ªáu bi·ªÉu ƒë·ªì
            prediction_data (dict): D·ªØ li·ªáu d·ª± ƒëo√°n
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            # T·∫°o bi·ªÉu ƒë·ªì
            plt.figure(figsize=(10, 6))
            
            # Thi·∫øt l·∫≠p style theo c·∫•u h√¨nh
            if self.viz_config['theme'] == 'dark':
                plt.style.use('dark_background')
                
            # V·∫Ω d·ªØ li·ªáu l·ªãch s·ª≠
            plt.plot(chart_data.index, chart_data['close'], label='Gi√° ƒë√≥ng c·ª≠a', color='white')
            
            # Th√™m d·ª± ƒëo√°n
            predictions = []
            labels = []
            colors = []
            
            dates = []
            last_date = chart_data.index[-1]
            current_date = datetime.now().date()
            
            if 'intraday' in prediction_data:
                intraday = prediction_data['intraday']
                if 'direction' in intraday and 'confidence' in intraday:
                    price = intraday.get('predicted_price', intraday.get('price', intraday.get('predicted_value', 0)))
                    predictions.append(price)
                    labels.append(f"Intraday ({intraday['confidence']:.1f}%)")
                    colors.append(self.up_color if intraday['direction'] == 'up' else 
                                self.down_color if intraday['direction'] == 'down' else self.neutral_color)
                    # Th√™m 4 gi·ªù ƒë·ªÉ d·ª± ƒëo√°n intraday
                    dates.append(pd.Timestamp(current_date) + pd.Timedelta(hours=4))
            
            if 'five_day' in prediction_data:
                five_day = prediction_data['five_day']
                if 'direction' in five_day and 'confidence' in five_day:
                    price = five_day.get('predicted_price', five_day.get('price', five_day.get('predicted_value', 0)))
                    predictions.append(price)
                    labels.append(f"5 ng√†y ({five_day['confidence']:.1f}%)")
                    colors.append(self.up_color if five_day['direction'] == 'up' else 
                                self.down_color if five_day['direction'] == 'down' else self.neutral_color)
                    # Th√™m 5 ng√†y cho d·ª± ƒëo√°n 5 ng√†y
                    dates.append(pd.Timestamp(current_date) + pd.Timedelta(days=5))
            
            if 'monthly' in prediction_data:
                monthly = prediction_data['monthly']
                if 'direction' in monthly and 'confidence' in monthly:
                    price = monthly.get('predicted_price', monthly.get('price', monthly.get('predicted_value', 0)))
                    predictions.append(price)
                    labels.append(f"1 th√°ng ({monthly['confidence']:.1f}%)")
                    colors.append(self.up_color if monthly['direction'] == 'up' else 
                                self.down_color if monthly['direction'] == 'down' else self.neutral_color)
                    # Th√™m 30 ng√†y cho d·ª± ƒëo√°n 1 th√°ng
                    dates.append(pd.Timestamp(current_date) + pd.Timedelta(days=30))
            
            # V·∫Ω c√°c d·ª± ƒëo√°n
            for i in range(len(predictions)):
                plt.scatter(dates[i], predictions[i], color=colors[i], s=100, zorder=5)
                plt.annotate(labels[i], (dates[i], predictions[i]), 
                           textcoords="offset points", xytext=(0,10), ha='center')
            
            # Th√™m ƒë∆∞·ªùng t·ª´ ƒëi·ªÉm cu·ªëi ƒë·∫øn d·ª± ƒëo√°n
            for i in range(len(predictions)):
                plt.plot([last_date, dates[i]], [chart_data['close'].iloc[-1], predictions[i]], 
                        '--', color=colors[i], alpha=0.7)
            
            # Thi·∫øt l·∫≠p nh√£n v√† ti√™u ƒë·ªÅ
            current_date_str = datetime.now().strftime("%d/%m/%Y")
            plt.title(f"D·ª± ƒëo√°n gi√° {symbol} (Ng√†y: {current_date_str})", fontsize=14)
            plt.xlabel("Th·ªùi gian")
            plt.ylabel("Gi√° ($)")
            plt.legend()
            plt.grid(True, alpha=0.3)
            
            # L∆∞u bi·ªÉu ƒë·ªì
            timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
            
            # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
            charts_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 
                                    "charts")
            os.makedirs(charts_dir, exist_ok=True)
            
            chart_path = os.path.join(charts_dir, f"{symbol}_prediction_{timestamp}.png")
            plt.savefig(chart_path)
            plt.close()
            
            # G·ª≠i bi·ªÉu ƒë·ªì l√™n Discord
            with open(chart_path, 'rb') as f:
                chart_data = f.read()
            
            files = {
                'file': (f"{symbol}_prediction.png", chart_data)
            }
            
            # T·∫°o th√¥ng tin d·ª± ƒëo√°n
            message = f"**Bi·ªÉu ƒë·ªì d·ª± ƒëo√°n gi√° {symbol} (Ng√†y: {current_date_str})**"
            
            payload = {
                'content': message
            }

            try:    
                # G·ª≠i bi·ªÉu ƒë·ªì l√™n Discord
                response = requests.post(
                    self.prediction_webhook, 
                    data=payload,
                    files=files
                )
            
                response.raise_for_status()
                logger.info(f"ƒê√£ g·ª≠i bi·ªÉu ƒë·ªì d·ª± ƒëo√°n cho {symbol} - HTTP Status: {response.status_code}")
                logger.debug(f"Discord response: {response.text[:100]}")  # Log 100 k√Ω t·ª± ƒë·∫ßu ti√™n
            except Exception as chart_err:
                logger.error(f"L·ªói khi g·ª≠i bi·ªÉu ƒë·ªì l√™n Discord: {chart_err}")
                # V·∫´n tr·∫£ v·ªÅ True ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n qu√° tr√¨nh kh√°c
            return True
        except Exception as e:
            logger.error(f"L·ªói khi t·∫°o v√† g·ª≠i bi·ªÉu ƒë·ªì d·ª± ƒëo√°n cho {symbol}: {str(e)}")
            logger.error(traceback.format_exc())
            return False

if __name__ == "__main__":
    # Test module
    logger.info("Ki·ªÉm tra module Discord Notifier")
    notifier = DiscordNotifier()
    
    # Test g·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t h·ªá th·ªëng
    success = notifier.send_system_update(
        title="Kh·ªüi ƒë·ªông BondZiA AI",
        message="H·ªá th·ªëng BondZiA AI ƒë√£ kh·ªüi ƒë·ªông v√† s·∫µn s√†ng d·ª± ƒëo√°n gi√° c·ªï phi·∫øu.",
        fields=[
            {
                "name": "Phi√™n b·∫£n",
                "value": "1.0.0",
                "inline": True
            },
            {
                "name": "C·ªï phi·∫øu theo d√µi",
                "value": "TSLA, NVDA, PLTR, AGX, META, AMZN, AAPL, IBM, BABA",
                "inline": True
            }
        ]
    )
    
    logger.info(f"G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t: {'Th√†nh c√¥ng' if success else 'Th·∫•t b·∫°i'}")