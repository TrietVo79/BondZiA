import os
import json
import requests
import time
from datetime import datetime
import pytz
from utils.logger_config import logger
import traceback
from io import BytesIO

class TelegramNotifier:
    """L·ªõp qu·∫£n l√Ω vi·ªác g·ª≠i th√¥ng b√°o ƒë·∫øn Telegram"""
    
    def __init__(self, config_path="../config/system_config.json"):
        """
        Kh·ªüi t·∫°o Telegram Notifier
        
        Args:
            config_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
        """
        # ƒê·ªçc c·∫•u h√¨nh
        self.config_path = config_path
        
        with open(self.config_path, 'r') as f:
            self.config = json.load(f)
        
        # ƒê·ªçc token v√† chat_id
        api_keys_path = os.path.join(os.path.dirname(self.config_path), "api_keys.json")
        with open(api_keys_path, 'r') as f:
            api_keys = json.load(f)
        
        self.token = api_keys['telegram']['bot_token']
        self.chat_id = api_keys['telegram']['chat_id']
        
        # Thi·∫øt l·∫≠p c·∫•u h√¨nh th√¥ng b√°o
        self.notification_config = self.config['notification']
        self.max_retries = self.notification_config.get('telegram_max_retries', 3)
        self.retry_delay = self.notification_config.get('telegram_retry_delay_seconds', 3)
        
        # Timezone
        self.market_timezone = pytz.timezone(self.config['market']['timezone'])
        
        # Kh·ªüi t·∫°o c√°c m√†u s·∫Øc (emoji thay cho m√†u)
        self.up_emoji = "üîº"
        self.down_emoji = "üîΩ"
        self.neutral_emoji = "‚û°Ô∏è"
        
        logger.info("Kh·ªüi t·∫°o Telegram Notifier th√†nh c√¥ng")
    
    def _clean_html_content(self, text):
        """
        L√†m s·∫°ch n·ªôi dung HTML ƒë·ªÉ tr√°nh l·ªói khi g·ª≠i tin nh·∫Øn Telegram
        """
        # Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát, thay th·∫ø c√°c th·∫ª kh√¥ng h·ª£p l·ªá
        text = text.replace("<", "&lt;").replace(">", "&gt;")
        # Ch·ªâ gi·ªØ l·∫°i c√°c th·∫ª HTML h·ª£p l·ªá v·ªõi Telegram
        allowed_tags = ["b", "i", "u", "s", "code", "pre"]
        for tag in allowed_tags:
            text = text.replace(f"&lt;{tag}&gt;", f"<{tag}>")
            text = text.replace(f"&lt;/{tag}&gt;", f"</{tag}>")
        return text

    def _send_message(self, text, parse_mode="HTML", retries=None):
        """
        G·ª≠i th√¥ng b√°o vƒÉn b·∫£n ƒë·∫øn Telegram
        
        Args:
            text (str): N·ªôi dung th√¥ng b√°o
            parse_mode (str): Ch·∫ø ƒë·ªô parse ('HTML' ho·∫∑c 'Markdown')
            retries (int, optional): S·ªë l·∫ßn th·ª≠ l·∫°i n·∫øu g·∫∑p l·ªói
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if retries is None:
            retries = self.max_retries
        
        # S·ª≠ d·ª•ng h√†m l√†m s·∫°ch HTML n·∫øu parse_mode l√† HTML
        if parse_mode == "HTML":
            text = self._clean_html_content(text)

        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': parse_mode
        }
        
        for attempt in range(retries + 1):
            try:
                response = requests.post(url, json=payload)
                response.raise_for_status()
                return True
            except requests.exceptions.RequestException as err:
                logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {err}")
                if attempt < retries:
                    logger.info(f"Th·ª≠ l·∫°i sau {self.retry_delay} gi√¢y (l·∫ßn {attempt + 1}/{retries})")
                    time.sleep(self.retry_delay)
                else:
                    return False
        
        return False
    
    def _send_photo(self, photo_path, caption, parse_mode="HTML", retries=None):
        """
        G·ª≠i ·∫£nh ƒë·∫øn Telegram
        
        Args:
            photo_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ·∫£nh
            caption (str): Ch√∫ th√≠ch ·∫£nh
            parse_mode (str): Ch·∫ø ƒë·ªô parse ('HTML' ho·∫∑c 'Markdown')
            retries (int, optional): S·ªë l·∫ßn th·ª≠ l·∫°i n·∫øu g·∫∑p l·ªói
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if retries is None:
            retries = self.max_retries
        
        url = f"https://api.telegram.org/bot{self.token}/sendPhoto"
        
        for attempt in range(retries + 1):
            try:
                with open(photo_path, 'rb') as photo_file:
                    files = {'photo': photo_file}
                    data = {
                        'chat_id': self.chat_id,
                        'caption': caption,
                        'parse_mode': parse_mode
                    }
                    response = requests.post(url, files=files, data=data)
                    response.raise_for_status()
                    return True
            except requests.exceptions.RequestException as err:
                logger.error(f"L·ªói khi g·ª≠i ·∫£nh Telegram: {err}")
                if attempt < retries:
                    logger.info(f"Th·ª≠ l·∫°i sau {self.retry_delay} gi√¢y (l·∫ßn {attempt + 1}/{retries})")
                    time.sleep(self.retry_delay)
                else:
                    return False
            except Exception as e:
                logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i ·∫£nh: {str(e)}")
                return False
        
        return False
    
    def _format_prediction_text(self, symbol, prediction_data):
        """
        ƒê·ªãnh d·∫°ng d·ªØ li·ªáu d·ª± ƒëo√°n ƒë·ªÉ hi·ªÉn th·ªã trong Telegram
        
        Args:
            symbol (str): M√£ c·ªï phi·∫øu
            prediction_data (dict): D·ªØ li·ªáu d·ª± ƒëo√°n
            
        Returns:
            str: VƒÉn b·∫£n ƒë√£ ƒë·ªãnh d·∫°ng cho Telegram
        """
        # L·∫•y d·ªØ li·ªáu d·ª± ƒëo√°n
        intraday = prediction_data.get('intraday', {})
        five_day = prediction_data.get('five_day', {})
        monthly = prediction_data.get('monthly', {})
        
        # L·∫•y gi√° hi·ªán t·∫°i
        current_price = prediction_data.get('current_price', 'N/A')
        if isinstance(current_price, (int, float)):
            current_price = f"${current_price:.2f}"
            
        # T·∫°o vƒÉn b·∫£n d·ª± ƒëo√°n
        timestamp = datetime.now(self.market_timezone).strftime("%Y-%m-%d %H:%M:%S %Z")
        
        # T·∫°o ti√™u ƒë·ªÅ
        text = f"<b>BondZiA AI - D·ª± ƒëo√°n gi√° {symbol}</b>\n"
        text += f"<i>({timestamp})</i>\n\n"
        text += f"Gi√° hi·ªán t·∫°i: <b>{current_price}</b>\n\n"
        
        # Th√™m th√¥ng tin intraday
        if intraday:
            direction = intraday.get('direction', 'neutral')
            emoji = self.up_emoji if direction == 'up' else self.down_emoji if direction == 'down' else self.neutral_emoji
            
            price = intraday.get('predicted_price', intraday.get('price', intraday.get('predicted_value', 'N/A')))
            if isinstance(price, (int, float)):
                price = f"${price:.2f}"
                
            confidence = intraday.get('confidence', 0)
            if isinstance(confidence, (int, float)):
                confidence = f"{confidence:.1f}%"
            
            reason = intraday.get('reason', "D·ª± ƒëo√°n d·ª±a tr√™n m√¥ h√¨nh ML")
            
            text += f"{emoji} <b>D·ª± ƒëo√°n Intraday:</b>\n"
            text += f"Gi√°: {price}\n"
            text += f"ƒê·ªô tin c·∫≠y: {confidence}\n"
            text += f"L√Ω do: {reason}\n\n"
        
        # Th√™m th√¥ng tin 5 ng√†y
        if five_day:
            direction = five_day.get('direction', 'neutral')
            emoji = self.up_emoji if direction == 'up' else self.down_emoji if direction == 'down' else self.neutral_emoji
            
            price = five_day.get('predicted_price', five_day.get('price', five_day.get('predicted_value', 'N/A')))
            if isinstance(price, (int, float)):
                price = f"${price:.2f}"
                
            confidence = five_day.get('confidence', 0)
            if isinstance(confidence, (int, float)):
                confidence = f"{confidence:.1f}%"
            
            reason = five_day.get('reason', "D·ª± ƒëo√°n d·ª±a tr√™n m√¥ h√¨nh ML")
            
            text += f"{emoji} <b>D·ª± ƒëo√°n 5 ng√†y:</b>\n"
            text += f"Gi√°: {price}\n"
            text += f"ƒê·ªô tin c·∫≠y: {confidence}\n"
            text += f"L√Ω do: {reason}\n\n"
        
        # Th√™m th√¥ng tin 1 th√°ng
        if monthly:
            direction = monthly.get('direction', 'neutral')
            emoji = self.up_emoji if direction == 'up' else self.down_emoji if direction == 'down' else self.neutral_emoji
            
            price = monthly.get('predicted_price', monthly.get('price', monthly.get('predicted_value', 'N/A')))
            if isinstance(price, (int, float)):
                price = f"${price:.2f}"
                
            confidence = monthly.get('confidence', 0)
            if isinstance(confidence, (int, float)):
                confidence = f"{confidence:.1f}%"
            
            reason = monthly.get('reason', "D·ª± ƒëo√°n d·ª±a tr√™n m√¥ h√¨nh ML")
            
            text += f"{emoji} <b>D·ª± ƒëo√°n 1 th√°ng:</b>\n"
            text += f"Gi√°: {price}\n"
            text += f"ƒê·ªô tin c·∫≠y: {confidence}\n"
            text += f"L√Ω do: {reason}\n"
        
        return text
    
    def send_prediction_message(self, predictions_data):
        """
        G·ª≠i th√¥ng b√°o d·ª± ƒëo√°n gi√° c·ªï phi·∫øu
        
        Args:
            predictions_data (dict): D·ªØ li·ªáu d·ª± ƒëo√°n theo c·∫•u tr√∫c {symbol: prediction_data}
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if not self.notification_config.get('send_telegram_predictions', True):
            logger.info("B·ªè qua th√¥ng b√°o d·ª± ƒëo√°n Telegram (ƒë√£ t·∫Øt trong c·∫•u h√¨nh)")
            return True
        
        try:
            success = True
            
            # G·ª≠i th√¥ng b√°o cho t·ª´ng c·ªï phi·∫øu
            for symbol, prediction_data in predictions_data.items():
                # T·∫°o vƒÉn b·∫£n d·ª± ƒëo√°n
                prediction_text = self._format_prediction_text(symbol, prediction_data)
                
                # G·ª≠i vƒÉn b·∫£n
                if not self._send_message(prediction_text):
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o d·ª± ƒëo√°n Telegram cho: {symbol}")
                    success = False
                else:
                    logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o d·ª± ƒëo√°n Telegram cho: {symbol}")
                
                # N·∫øu c√≥ bi·ªÉu ƒë·ªì, g·ª≠i bi·ªÉu ƒë·ªì
                if 'chart_path' in prediction_data and prediction_data['chart_path']:
                    chart_path = prediction_data['chart_path']
                    caption = f"Bi·ªÉu ƒë·ªì d·ª± ƒëo√°n gi√° {symbol}"
                    
                    if not self._send_photo(chart_path, caption):
                        logger.error(f"Kh√¥ng th·ªÉ g·ª≠i bi·ªÉu ƒë·ªì d·ª± ƒëo√°n Telegram cho: {symbol}")
                        success = False
                    else:
                        logger.info(f"ƒê√£ g·ª≠i bi·ªÉu ƒë·ªì d·ª± ƒëo√°n Telegram cho: {symbol}")
                
                # ƒê·ª£i gi·ªØa c√°c l·∫ßn g·ª≠i ƒë·ªÉ tr√°nh rate limit
                time.sleep(1)
            
            return success
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o d·ª± ƒëo√°n Telegram: {str(e)}")
            logger.error(traceback.format_exc())
            return False
    
    def send_system_update(self, title, message, is_error=False, fields=None):
        """
        G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t h·ªá th·ªëng
        
        Args:
            title (str): Ti√™u ƒë·ªÅ th√¥ng b√°o
            message (str): N·ªôi dung th√¥ng b√°o
            is_error (bool): True n·∫øu l√† th√¥ng b√°o l·ªói
            fields (list, optional): Danh s√°ch c√°c tr∆∞·ªùng b·ªï sung
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if is_error and not self.notification_config.get('send_telegram_errors', True):
            logger.info("B·ªè qua th√¥ng b√°o l·ªói Telegram (ƒë√£ t·∫Øt trong c·∫•u h√¨nh)")
            return True
        
        if not is_error and not self.notification_config.get('send_telegram_system_updates', True):
            logger.info("B·ªè qua th√¥ng b√°o c·∫≠p nh·∫≠t Telegram (ƒë√£ t·∫Øt trong c·∫•u h√¨nh)")
            return True
        
        try:
            # X√°c ƒë·ªãnh emoji d·ª±a tr√™n lo·∫°i th√¥ng b√°o
            emoji = "‚ö†Ô∏è" if is_error else "üì¢"
            
            # T·∫°o timestamp
            timestamp = datetime.now(self.market_timezone).strftime("%Y-%m-%d %H:%M:%S %Z")
            
            # T·∫°o vƒÉn b·∫£n th√¥ng b√°o
            text = f"<b>{emoji} {title}</b>\n"
            text += f"<i>({timestamp})</i>\n\n"
            text += f"{message}\n"
            
            # Th√™m c√°c tr∆∞·ªùng b·ªï sung
            if fields:
                text += "\n"
                for field in fields:
                    name = field.get("name", "")
                    value = field.get("value", "")
                    text += f"<b>{name}:</b> {value}\n"
            
            # G·ª≠i th√¥ng b√°o
            return self._send_message(text)
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t h·ªá th·ªëng qua Telegram: {str(e)}")
            logger.error(traceback.format_exc())
            return False
    
    def send_evolution_update(self, version, improvements, params_changed, performance):
        """
        G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t v·ªÅ ti·∫øn h√≥a c·ªßa AI
        
        Args:
            version (str): Phi√™n b·∫£n m·ªõi
            improvements (dict): C·∫£i thi·ªán theo c·ªï phi·∫øu {symbol: percentage}
            params_changed (int): S·ªë l∆∞·ª£ng si√™u tham s·ªë ƒë√£ thay ƒë·ªïi
            performance (dict): Hi·ªáu su·∫•t tr∆∞·ªõc v√† sau khi ti·∫øn h√≥a
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if not self.notification_config.get('send_telegram_system_updates', True):
            logger.info("B·ªè qua th√¥ng b√°o ti·∫øn h√≥a Telegram (ƒë√£ t·∫Øt trong c·∫•u h√¨nh)")
            return True
        
        try:
            # T·∫°o danh s√°ch c·∫£i thi·ªán
            improvements_list = []
            for symbol, percentage in improvements.items():
                if percentage > 0:
                    improvements_list.append(f"{symbol}: +{percentage:.2f}%")
                else:
                    improvements_list.append(f"{symbol}: {percentage:.2f}%")
            
            improvements_text = "\n".join(improvements_list)
            
            # T·∫°o th√¥ng tin v·ªÅ hi·ªáu su·∫•t
            performance_text = f"Tr∆∞·ªõc ti·∫øn h√≥a: {performance.get('before', 'N/A')}\nSau ti·∫øn h√≥a: {performance.get('after', 'N/A')}"
            
            # T·∫°o c√°c tr∆∞·ªùng
            fields = [
                {
                    "name": "C·∫£i thi·ªán d·ª± ƒëo√°n",
                    "value": improvements_text
                },
                {
                    "name": "S·ªë l∆∞·ª£ng si√™u tham s·ªë thay ƒë·ªïi",
                    "value": str(params_changed)
                },
                {
                    "name": "Hi·ªáu su·∫•t",
                    "value": performance_text
                }
            ]
            
            # G·ª≠i th√¥ng b√°o
            return self.send_system_update(
                title=f"Ti·∫øn h√≥a AI th√†nh c√¥ng - Phi√™n b·∫£n {version}",
                message="BondZiA AI ƒë√£ ho√†n th√†nh qu√° tr√¨nh ti·∫øn h√≥a v√† n√¢ng c·∫•p l√™n phi√™n b·∫£n m·ªõi.",
                fields=fields
            )
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o ti·∫øn h√≥a qua Telegram: {str(e)}")
            logger.error(traceback.format_exc())
            return False

if __name__ == "__main__":
    # Test module
    logger.info("Ki·ªÉm tra module Telegram Notifier")
    notifier = TelegramNotifier()
    
    # Test g·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t h·ªá th·ªëng
    success = notifier.send_system_update(
        title="Kh·ªüi ƒë·ªông BondZiA AI",
        message="H·ªá th·ªëng BondZiA AI ƒë√£ kh·ªüi ƒë·ªông v√† s·∫µn s√†ng d·ª± ƒëo√°n gi√° c·ªï phi·∫øu.",
        fields=[
            {
                "name": "Phi√™n b·∫£n",
                "value": "1.0.0"
            },
            {
                "name": "C·ªï phi·∫øu theo d√µi",
                "value": "TSLA, NVDA, PLTR, AGX, META, AMZN, AAPL, IBM, BABA"
            }
        ]
    )
    
    logger.info(f"G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t Telegram: {'Th√†nh c√¥ng' if success else 'Th·∫•t b·∫°i'}")